from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from telegram import Update, WebAppInfo, MenuButtonWebApp, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import logging
import asyncio
import json

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7651271495:AAFrdL7sxLEx0dcvCTsJr73uabpeZ38oYng"  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
FRONTEND_URL = "https://webapp-for-bar-front-git-main-adams-projects-62b06f32.vercel.app"

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === FASTAPI app ===
app = FastAPI()

origins = [
    FRONTEND_URL,
    "http://localhost",
    "http://localhost:3000",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === Telegram Bot ===
tg_app = ApplicationBuilder().token(TOKEN).build()

@app.get("/")
async def root():
    return {"message": "Server is running"}

@app.post("/notify")
async def notify(request: Request):
    try:
        data = await request.json()
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /notify: {data}")

        user_id = data.get("user_id")
        if not user_id:
            return {"error": "user_id not found"}

        services = data.get("services", [])
        services_text = "\n".join(f"‚Äî {s['title']} ({s['price']} ‚Ç∏)" for s in services) if services else "‚Äî"

        msg = (
            f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!\n\n"
            f"üìÖ –î–∞—Ç–∞: {data.get('date', '‚Äî')} –≤ {data.get('time', '‚Äî')}\n"
            f"üë§ –ú–∞—Å—Ç–µ—Ä: {data.get('specialist', '‚Äî')}\n"
            f"üìç –§–∏–ª–∏–∞–ª: {data.get('branch', '‚Äî')}\n\n"
            f"üíº –£—Å–ª—É–≥–∏:\n{services_text}\n\n"
            f"üßë –ò–º—è: {data.get('name', '‚Äî')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '‚Äî')}\n"
            f"‚úâÔ∏è Email: {data.get('email', '‚Äî')}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '‚Äî')}"
        )

        await tg_app.bot.send_message(chat_id=user_id, text=msg)
        return {"status": "ok"}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /notify: {e}")
        return {"error": str(e)}

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [
        [KeyboardButton("–∞–ø—Ä–∞–∞–∞–ø—Ä–ø–∞—Ä–∞–ø—Ä", web_app=WebAppInfo(url=FRONTEND_URL))]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ sendData –∏–∑ WebApp ===
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)
        logger.info("üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp: %s", data)

        services = data.get("services", [])
        services_text = "\n".join(f"‚Äî {s['title']} ({s['price']} ‚Ç∏)" for s in services) if services else "‚Äî"

        msg = (
            f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!\n\n"
            f"üìÖ –î–∞—Ç–∞: {data.get('date')} –≤ {data.get('time')}\n"
            f"üë§ –ú–∞—Å—Ç–µ—Ä: {data.get('specialist')}\n"
            f"üìç –§–∏–ª–∏–∞–ª: {data.get('branch')}\n\n"
            f"üíº –£—Å–ª—É–≥–∏:\n{services_text}\n\n"
            f"üßë –ò–º—è: {data.get('name')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            f"‚úâÔ∏è Email: {data.get('email')}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}"
        )

        await update.message.reply_text(msg)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ web_app_data: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ üòû")

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MenuButton –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ ===
# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MenuButton –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ ===
# async def setup_menu(app):
#     await app.bot.set_chat_menu_button(
#         menu_button=MenuButtonWebApp(
#             text="üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
#             web_app=WebAppInfo(url=FRONTEND_URL)
#         )
#     )
#     logger.info("‚úÖ MenuButtonWebApp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def run_telegram():
    tg_app.add_handler(CommandHandler("start", start))
    tg_app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    # tg_app.post_init = setup_menu
    await tg_app.run_polling()

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    asyncio.create_task(run_telegram())
